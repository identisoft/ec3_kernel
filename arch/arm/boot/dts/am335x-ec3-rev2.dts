/*
 * Copyright (C) 2014 IdentiSoft Pty (Ltd) http://www.identisoft.net/
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation.
 */
/dts-v1/;

#include "am33xx.dtsi"
#include <dt-bindings/interrupt-controller/irq.h>

/ {
	model = "IdentiSoft AM335x EC3";
	compatible = "ti,am33xx";

	cpus {
		cpu@0 {
			cpu0-supply = <&dcdc2_reg>;
		};
	};

	memory@80000000 {
		device_type = "memory";
		reg = <0x80000000 0x20000000>; /* 512 MB */
	};

	leds {
		compatible = "gpio-leds";
		pinctrl-names = "default";
		pinctrl-0 = <&user_leds_pin>;

		cpu_usage {
			gpios = <&gpio1 21 GPIO_ACTIVE_LOW>;
			linux,default-trigger = "cpu0";
			default-state = "off";
		};

		cpu_heartbeat {
			gpios = <&gpio1 22 GPIO_ACTIVE_LOW>;
			linux,default-trigger = "heartbeat";
			default-state = "off";
		};

		mmc0 {
			gpios = <&gpio3 21 GPIO_ACTIVE_LOW>;
			linux,default-trigger = "mmc0";
			default-state = "on";
		};
	};

	factoryDefault {
		compatible = "gpio-keys";
		pinctrl-names = "default";
		pinctrl-0 = <&button1_pin>;

		factorydefault {
			gpios = <&gpio1 23 GPIO_ACTIVE_LOW>;
			linux,code = <70>;
			debounce-interval = <200>;
		};
	};

	antiTamper {
		compatible = "gpio-keys";
		pinctrl-names = "default";
		pinctrl-0 = <&button2_pin>;

		antitamper {
			gpios = <&gpio1 25 GPIO_ACTIVE_HIGH>;
			linux,code = <65>;
			debounce-interval = <200>;
		};
	};

	/* Test */
	keypad {
		compatible = "gpio-matrix-keypad";
		linux,no-autorepeat;
		debounce-delay-ms = <10>;
		col-scan-delay-us = <20>;
		/* Pull down resistors*/
		row-gpios = <&gpio1 1 GPIO_ACTIVE_HIGH    /* Row 1 */
				         &gpio1 3 GPIO_ACTIVE_HIGH    /* Row 2 */
				         &gpio1 2 GPIO_ACTIVE_HIGH		/* Row 3 */
				         &gpio1 5 GPIO_ACTIVE_HIGH>;  /* Row 4 */

		col-gpios = <&gpio1 4 GPIO_ACTIVE_HIGH    /* Col 1 */
				         &gpio1 7 GPIO_ACTIVE_HIGH		/* Col 2 */
								 &gpio1 6 GPIO_ACTIVE_HIGH>;  /* Col 3 */
								 /* 0xRRCCKKKK*/
		linux,keymap = <0x00000002		/* 1 */
										0x00010003		/* 2 */
										0x00020004		/* 3 */
										0x01000005		/* 4 */
										0x01010006		/* 5 */
										0x01020007		/* 6 */
										0x02000008		/* 7 */
										0x02010009		/* 8 */
										0x0202000A		/* 9 */
										0x0300000E		/* * (BACKSPACE)*/
										0x0301000B		/* 0 */
										0x0302001C>; 	/* # (ENTER)*/
	};

	buzzer {
		compatible = "pwm-beeper";
		pinctrl-names = "default";
		pinctrl-0 = <&buzzer_pin>;
		pwms = <&ehrpwm1 1 250000 0>;
	};

	panel {
		compatible = "ti,tilcdc,panel";
		pinctrl-names = "default";
		pinctrl-0 = <&lcd_pins>;
		status = "okay";
		panel-info {
			ac-bias           = <255>;
			ac-bias-intrpt    = <0>;
			dma-burst-sz      = <16>;
			bpp               = <24>;
			fdd               = <0x80>;
			sync-edge         = <0>;
			sync-ctrl         = <1>;
			raster-order      = <0>;
			fifo-th           = <0>;
			invert-pxl-clk;
		};
		/* HX8257A */
		display-timings {
      480x272 {
				hactive         = <480>;
				vactive         = <272>;
				hback-porch     = <2>;
				hfront-porch    = <2>;
				hsync-len       = <41>;
				vback-porch     = <2>;
				vfront-porch    = <2>;
				vsync-len       = <10>;
				clock-frequency = <12000000>; /* Ensure that the PLL does not start up - noise issue */
				hsync-active    = <0>;
				vsync-active    = <0>;
			};
		};
	};

	bandgap {
		reg = <0x44e10448 0x4 0x44e1044C 0x4>;
		compatible = "ti,omap4430-bandgap";
	};

	vmmcsd_fixed: fixedregulator@0 {
		compatible = "regulator-fixed";
		regulator-name = "vmmcsd_fixed";
		regulator-min-microvolt = <3300000>;
		regulator-max-microvolt = <3300000>;
	};
};

&am33xx_pinmux {
	pinctrl-names = "default";
	pinctrl-0 = <&extcon_pins>;

	user_leds_pin: pinmux_user_leds_pin {
		pinctrl-single,pins = <
			0x54 (PIN_OUTPUT_PULLUP | MUX_MODE7)		/* gpmc_a5.gpio1_21 */
			0x58 (PIN_OUTPUT_PULLDOWN | MUX_MODE7)	/* gpmc_a6.gpio1_22 */
			0x60 (PIN_OUTPUT_PULLUP | MUX_MODE7)		/* gpmc_a8.gpio1_24 */
		>;
	};

	button1_pin: pinmux_button1_pin {
		pinctrl-single,pins = <
			0x5C (PIN_INPUT_PULLUP | MUX_MODE7)	/* gpmc_a6.gpio1_23 */
		>;
	};

	button2_pin: pinmux_button2_pin {
		pinctrl-single,pins = <
			0x64 (PIN_INPUT_PULLUP | MUX_MODE7)	/* gpmc_a9.gpio1_25 */
		>;
	};

	buzzer_pin: pinmux_buzzer_pin {
		pinctrl-single,pins = <
			0x4c (PIN_OUTPUT_PULLUP | MUX_MODE6)	/* gpmc_a3.ehrpwm1b */
		>;
	};

	lcd_pins: pinmux_lcd_pins {
		pinctrl-single,pins = <
			0x20 (PIN_OUTPUT | MUX_MODE1)		/* gpmc_ad8.lcd_data23 */
			0x24 (PIN_OUTPUT | MUX_MODE1)		/* gpmc_ad9.lcd_data22 */
			0x28 (PIN_OUTPUT | MUX_MODE1)		/* gpmc_ad10.lcd_data21 */
			0x2c (PIN_OUTPUT | MUX_MODE1)		/* gpmc_ad11.lcd_data20 */
			0x30 (PIN_OUTPUT | MUX_MODE1)		/* gpmc_ad12.lcd_data19 */
			0x34 (PIN_OUTPUT | MUX_MODE1)		/* gpmc_ad13.lcd_data18 */
			0x38 (PIN_OUTPUT | MUX_MODE1)		/* gpmc_ad14.lcd_data17 */
			0x3c (PIN_OUTPUT | MUX_MODE1)		/* gpmc_ad15.lcd_data16 */
			0xa0 (PIN_OUTPUT | MUX_MODE0)		/* lcd_data0.lcd_data0 */
			0xa4 (PIN_OUTPUT | MUX_MODE0)		/* lcd_data1.lcd_data1 */
			0xa8 (PIN_OUTPUT | MUX_MODE0)		/* lcd_data2.lcd_data2 */
			0xac (PIN_OUTPUT | MUX_MODE0)		/* lcd_data3.lcd_data3 */
			0xb0 (PIN_OUTPUT | MUX_MODE0)		/* lcd_data4.lcd_data4 */
			0xb4 (PIN_OUTPUT | MUX_MODE0)		/* lcd_data5.lcd_data5 */
			0xb8 (PIN_OUTPUT | MUX_MODE0)		/* lcd_data6.lcd_data6 */
			0xbc (PIN_OUTPUT | MUX_MODE0)		/* lcd_data7.lcd_data7 */
			0xc0 (PIN_OUTPUT | MUX_MODE0)		/* lcd_data8.lcd_data8 */
			0xc4 (PIN_OUTPUT | MUX_MODE0)		/* lcd_data9.lcd_data9 */
			0xc8 (PIN_OUTPUT | MUX_MODE0)		/* lcd_data10.lcd_data10 */
			0xcc (PIN_OUTPUT | MUX_MODE0)		/* lcd_data11.lcd_data11 */
			0xd0 (PIN_OUTPUT | MUX_MODE0)		/* lcd_data12.lcd_data12 */
			0xd4 (PIN_OUTPUT | MUX_MODE0)		/* lcd_data13.lcd_data13 */
			0xd8 (PIN_OUTPUT | MUX_MODE0)		/* lcd_data14.lcd_data14 */
			0xdc (PIN_OUTPUT | MUX_MODE0)		/* lcd_data15.lcd_data15 */
			0xe0 (PIN_OUTPUT | MUX_MODE0)		/* lcd_vsync.lcd_vsync */
			0xe4 (PIN_OUTPUT | MUX_MODE0)		/* lcd_hsync.lcd_hsync */
			0xe8 (PIN_OUTPUT | MUX_MODE0)		/* lcd_pclk.lcd_pclk */
			0xec (PIN_OUTPUT | MUX_MODE0)		/* lcd_ac_bias_en.lcd_ac_bias_en */
		>;
	};

	extcon_pins: pinmux_extcon_pins { /* WIP */
		pinctrl-single,pins = <
			0x0   (PIN_INPUT_PULLUP | MUX_MODE7)	/* gpmc_ad0.gpio1_0 */
			0x04	(PIN_INPUT_PULLUP | MUX_MODE7)	/* gpmc_ad1.gpio1_1 */
			0x08	(PIN_INPUT_PULLUP | MUX_MODE7)	/* gpmc_ad2.gpio1_2 */
			0x0c	(PIN_INPUT_PULLUP | MUX_MODE7)	/* gpmc_ad3.gpio1_3 */
			0x10	(PIN_INPUT_PULLUP | MUX_MODE7)	/* gpmc_ad4.gpio1_4 */
			0x14	(PIN_INPUT_PULLUP | MUX_MODE7)	/* gpmc_ad5.gpio1_5 */
			0x18	(PIN_INPUT_PULLUP | MUX_MODE7)	/* gpmc_ad6.gpio1_6 */
			0x1c	(PIN_INPUT_PULLUP | MUX_MODE7)	/* gpmc_ad7.gpio1_7 */
			0x40	(PIN_INPUT_PULLUP | MUX_MODE7)	/* gpmc_a0.gpio1_16 */
			0x44	(PIN_INPUT_PULLUP | MUX_MODE7)	/* gpmc_a1.gpio1_17 */
			0x50	(PIN_INPUT_PULLUP | MUX_MODE7)	/* gpmc_a4.gpio1_20 */
			0x78	(PIN_INPUT_PULLUP | MUX_MODE7)	/* gpmc_be1n.gpio1_28 */
			0x7c	(PIN_INPUT_PULLUP | MUX_MODE7)	/* gpmc_csn0.gpio1_29 */
			0x80	(PIN_INPUT_PULLUP | MUX_MODE7)	/* gpmc_csn1.gpio1_30 */
			0x84	(PIN_INPUT_PULLUP | MUX_MODE7)	/* gpmc_csn2.gpio1_31 */
			0x90	(PIN_INPUT_PULLUP | MUX_MODE7)	/* gpmc_advn_ale.gpio2_2 */
			0x94	(PIN_INPUT_PULLUP | MUX_MODE7)	/* gpmc_oen_ren.gpio2_3 */
			0x98	(PIN_INPUT_PULLUP | MUX_MODE7)	/* gpmc_wen.gpio2_4 */
			0x9c	(PIN_INPUT_PULLUP | MUX_MODE7)	/* gpmc_be0n_cle.gpio2_5 */
			0x1a4	(PIN_INPUT_PULLUP | MUX_MODE7)	/* mcasp0_fsr.gpio3_19 */
			0x1ac	(PIN_INPUT_PULLUP | MUX_MODE7)	/* mcasp0_ahclkx.gpio3_21 */

			0x178	(PIN_OUTPUT_PULLUP | MUX_MODE2)	/* uart1_ctsn.dcan0_tx */
			0x17c	(PIN_INPUT_PULLUP | MUX_MODE2)	/* uart1_rtsn.dcan0_rx */

			0x190	(PIN_OUTPUT_PULLUP | MUX_MODE3)	/* mcasp0_aclkx.spi1_sclk */
			0x194	(PIN_OUTPUT_PULLUP | MUX_MODE3)	/* mcasp0_sfx.spi1_d0 */
			0x198	(PIN_INPUT_PULLUP | MUX_MODE3)	/* mcasp0_axr0.spi1_d1 */
			0x19c	(PIN_OUTPUT_PULLUP | MUX_MODE3)	/* mcasp0_ahclkr.spi1_cs0 */
		>;
	};

	i2c0_pins: pinmux_i2c0_pins {
		pinctrl-single,pins = <
			0x188 (PIN_INPUT_PULLUP | MUX_MODE0)	/* i2c0_sda.i2c0_sda */
			0x18c (PIN_INPUT_PULLUP | MUX_MODE0)	/* i2c0_scl.i2c0_scl */
		>;
	};

	i2c1_pins: pinmux_i2c1_pins {
		pinctrl-single,pins = <
			0x158 (PIN_INPUT_PULLUP | MUX_MODE2)	/* spi0_d1.i2c1_scl */
			0x15C (PIN_INPUT_PULLUP | MUX_MODE2)	/* spi0_cs0.i2c1_sda */
		>;
	};

	uart0_pins: pinmux_uart0_pins {
		pinctrl-single,pins = <
			0x170 (PIN_INPUT_PULLUP | MUX_MODE0)		/* uart0_rxd.uart0_rxd */
			0x174 (PIN_OUTPUT_PULLDOWN | MUX_MODE0)	/* uart0_txd.uart0_txd */
		>;
	};

	uart1_pins: pinmux_uart1_pins {
		pinctrl-single,pins = <
			0x180 (PIN_INPUT_PULLUP | MUX_MODE0)		/* uart1_rxd.uart1_rxd */
			0x184 (PIN_OUTPUT_PULLDOWN | MUX_MODE0)	/* uart1_txd.uart1_txd */
		>;
	};

	uart2_pins: pinmux_uart2_pins {
		pinctrl-single,pins = <
			0x150	(PIN_INPUT_PULLUP | MUX_MODE1)		/* spi0_sclk.uart2_rxd */
			0x154	(PIN_OUTPUT_PULLDOWN | MUX_MODE1)	/* spi0_d0.uart2_txd */
		>;
	};

	cpsw_default: cpsw_default {
		pinctrl-single,pins = <
			/* Slave 1 */
			0x108 (PIN_INPUT_PULLUP | MUX_MODE0)	/* mii1_col.mii1_col */
			0x10C (PIN_INPUT_PULLUP | MUX_MODE0)	/* mii1_crs.mii1_crs */
			0x110 (PIN_INPUT_PULLUP | MUX_MODE0)	/* mii1_rxerr.mii1_rxerr */
			0x114 (PIN_OUTPUT_PULLDOWN | MUX_MODE0)	/* mii1_txen.mii1_txen */
			0x118 (PIN_INPUT_PULLUP | MUX_MODE0)		/* mii1_rxdv.mii1_rxdv */
			0x11c (PIN_OUTPUT_PULLDOWN | MUX_MODE0)	/* mii1_txd3.mii1_txd3 */
			0x120 (PIN_OUTPUT_PULLDOWN | MUX_MODE0)	/* mii1_txd2.mii1_txd2 */
			0x124 (PIN_OUTPUT_PULLDOWN | MUX_MODE0)	/* mii1_txd1.mii1_txd1 */
			0x128 (PIN_OUTPUT_PULLDOWN | MUX_MODE0)	/* mii1_txd0.mii1_txd0 */
			0x12c (PIN_INPUT_PULLUP | MUX_MODE0)	/* mii1_txclk.mii1_txclk */
			0x130 (PIN_INPUT_PULLUP | MUX_MODE0)	/* mii1_rxclk.mii1_rxclk */
			0x134 (PIN_INPUT_PULLUP | MUX_MODE0)	/* mii1_rxd3.mii1_rxd3 */
			0x138 (PIN_INPUT_PULLUP | MUX_MODE0)	/* mii1_rxd2.mii1_rxd2 */
			0x13c (PIN_INPUT_PULLUP | MUX_MODE0)	/* mii1_rxd1.mii1_rxd1 */
			0x140 (PIN_INPUT_PULLUP | MUX_MODE0)	/* mii1_rxd0.mii1_rxd0 */
		>;
	};

	cpsw_sleep: cpsw_sleep {
		pinctrl-single,pins = <
			/* Slave 1 reset value */
			0x108 (PIN_INPUT_PULLDOWN | MUX_MODE7)
			0x10C (PIN_INPUT_PULLDOWN | MUX_MODE7)
			0x110 (PIN_INPUT_PULLDOWN | MUX_MODE7)
			0x114 (PIN_INPUT_PULLDOWN | MUX_MODE7)
			0x118 (PIN_INPUT_PULLDOWN | MUX_MODE7)
			0x11c (PIN_INPUT_PULLDOWN | MUX_MODE7)
			0x120 (PIN_INPUT_PULLDOWN | MUX_MODE7)
			0x124 (PIN_INPUT_PULLDOWN | MUX_MODE7)
			0x128 (PIN_INPUT_PULLDOWN | MUX_MODE7)
			0x12c (PIN_INPUT_PULLDOWN | MUX_MODE7)
			0x130 (PIN_INPUT_PULLDOWN | MUX_MODE7)
			0x134 (PIN_INPUT_PULLDOWN | MUX_MODE7)
			0x138 (PIN_INPUT_PULLDOWN | MUX_MODE7)
			0x13c (PIN_INPUT_PULLDOWN | MUX_MODE7)
			0x140 (PIN_INPUT_PULLDOWN | MUX_MODE7)
		>;
	};

	davinci_mdio_default: davinci_mdio_default {
		pinctrl-single,pins = <
			/* MDIO */
			0x148 (PIN_INPUT_PULLUP | SLEWCTRL_FAST | MUX_MODE0)	/* mdio_data.mdio_data */
			0x14c (PIN_OUTPUT_PULLUP | MUX_MODE0)									/* mdio_clk.mdio_clk */
		>;
	};

	davinci_mdio_sleep: davinci_mdio_sleep {
		pinctrl-single,pins = <
			/* MDIO reset value */
			0x148 (PIN_INPUT_PULLDOWN | MUX_MODE7)
			0x14c (PIN_INPUT_PULLDOWN | MUX_MODE7)
		>;
	};

	mmc1_pins: pinmux_mmc1_pins {
		pinctrl-single,pins = <
			0x160 (PIN_INPUT | MUX_MODE7)		/* spi0_cs1.gpio0_6 */
		>;
	};
};

&sham {
	status = "okay";
};

&aes {
	status = "okay";
};

&prcm_clocks {
	sc16is7xx_clk: sc16is7xx_clk {
		compatible = "fixed-clock";
		#clock-cells = <0>;
		clock-frequency = <11059200>;
	};
};

&epwmss1 {
	status = "okay";
};

&ehrpwm1 {
	status = "okay";
};

/* Console */
&uart0 {
	pinctrl-names = "default";
	pinctrl-0 = <&uart0_pins>;
	status = "okay";
};

/* This is the SBus port */
/* Used RS485 mode to suppress the TX echo */
/* Used the buzzer pin for rts which is muxed for pwm */
&uart1 {
	pinctrl-names = "default";
	pinctrl-0 = <&uart1_pins>;
	linux,rs485-enabled-at-boot-time;
	rs485-rts-delay = <0 0>;
	rs485-rts-active-high;
	rts-gpio = <&gpio1 19 GPIO_ACTIVE_HIGH>;
	status = "okay";
};

/* External connector */
&uart2 {
	pinctrl-names = "default";
	pinctrl-0 = <&uart2_pins>;
	status = "okay";
};

&usb {
	status = "okay";
};

&usb_ctrl_mod {
	status = "okay";
};

&usb0_phy {
	status = "okay";
};

&usb1_phy {
	status = "okay";
};

&usb0 {
	status = "okay";
	dr_mode = "host";
};

&usb1 {
	status = "okay";
	dr_mode = "host";
};

&cppi41dma  {
	status = "okay";
};

&i2c0 {
	pinctrl-names = "default";
	pinctrl-0 = <&i2c0_pins>;
	clock-frequency = <400000>;
	status = "okay";

	tps: tps@24 {
		reg = <0x24>;
	};

	rtc_nxp: rtc@51 {
		compatible = "nxp,pcf8563";
		reg = <0x51>;
	};
};

&i2c1 {
	pinctrl-names = "default";
	pinctrl-0 = <&i2c1_pins>;
	clock-frequency = <400000>;
	status = "okay";

	sc16is740: sc16is740@4d {
		compatible = "nxp,sc16is740";
		reg = <0x4d>;
		clocks = <&sc16is7xx_clk>;
		interrupt-parent = <&gpio1>;
		interrupts = <0 IRQ_TYPE_EDGE_FALLING>;
	};
};

/include/ "tps65217.dtsi"

&tps {
	regulators {
		dcdc1_reg: regulator@0 {
			regulator-always-on;
		};

		dcdc2_reg: regulator@1 {
			/* VDD_MPU voltage limits 0.95V - 1.325V with +/-4% tolerance */
			regulator-name = "vdd_mpu";
			regulator-min-microvolt = <925000>;
			regulator-max-microvolt = <1378000>;
			regulator-boot-on;
			regulator-always-on;
		};

		dcdc3_reg: regulator@2 {
			/* VDD_CORE voltage limits 0.95V - 1.1V with +/-4% tolerance */
			regulator-name = "vdd_core";
			regulator-min-microvolt = <925000>;
			regulator-max-microvolt = <1150000>;
			regulator-boot-on;
			regulator-always-on;
		};

		ldo1_reg: regulator@3 {
			regulator-always-on;
		};

		ldo2_reg: regulator@4 {
			regulator-always-on;
		};

		ldo3_reg: regulator@5 {
			regulator-min-microvolt = <1800000>;
			regulator-max-microvolt = <1800000>;
			regulator-always-on;
		};

		ldo4_reg: regulator@6 {
			regulator-always-on;
		};
	};
};

&cpsw_emac0 {
	phy_id = <&davinci_mdio>, <1>;
	phy-mode = "mii";
};

&mac {
	pinctrl-names = "default", "sleep";
	pinctrl-0 = <&cpsw_default>;
	pinctrl-1 = <&cpsw_sleep>;
	slaves = <1>;
	status = "okay";
};

&davinci_mdio {
	pinctrl-names = "default", "sleep";
	pinctrl-0 = <&davinci_mdio_default>;
	pinctrl-1 = <&davinci_mdio_sleep>;
	status = "okay";
};

&mmc1 {
	pinctrl-names = "default";
	pinctrl-0 = <&mmc1_pins>;
	status = "okay";
	bus-width = <0x4>;
	cd-gpios = <&gpio0 6 GPIO_ACTIVE_HIGH>;
	cd-inverted;
	vmmc-supply = <&vmmcsd_fixed>;
};

&tscadc {
	status = "okay";
	tsc {
		ti,wires = <4>;
		ti,x-plate-resistance = <200>;
		ti,coordinate-readouts = <5>;
		ti,wire-config = <0x00 0x11 0x22 0x33>;
	};

	adc {
		ti,adc-channels = <4 5 6 7>;
	};
};

&lcdc {
	status = "okay";
/*	blue-and-red-wiring = "straight"; */
/*	blue-and-red-wiring = "crossed"; */
};

